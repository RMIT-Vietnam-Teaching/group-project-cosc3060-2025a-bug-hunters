
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Add Coins</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <script src="https://js.stripe.com/v3/"></script>

  <style>
    body {
      background-color: #fff;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }
    .form-box {
      border: 1px solid #ccc;
      border-radius: 12px;
      padding: 24px;
      margin-bottom: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
      background-color: #fff;
    }
    .order-summary {
      border: 1px solid #ccc;
      padding: 20px;
      border-radius: 12px;
      background-color: #fff;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }
    .checkout-btn {
      background-color: #e26d4d;
      color: white;
      font-weight: 600;
      padding: 12px 24px;
      border-radius: 8px;
      border: none;
      width: 100%;
      transition: background-color 0.2s ease-in-out;
    }
    .checkout-btn:hover {
      background-color: #c95535;
    }
    .select-btn {
      border: 1px solid #e26d4d;
      color: #e26d4d;
      background: transparent;
      border-radius: 6px;
      padding: 6px 16px;
      font-weight: 500;
      transition: all 0.2s;
    }
    .select-btn:hover {
      background-color: #e26d4d;
      color: white;
    }
    .form-control::placeholder {
      color: #aaa;
    }
    .form-label {
      margin-bottom: 4px;
    }
    .form-section {
      margin-bottom: 1.5rem;
    }
    .special-deal-item {
      border-bottom: 1px solid #eee;
      padding: 8px 0;
    }
    .toggle-visibility {
      position: absolute;
      top: 50%;
      right: 16px;
      transform: translateY(-50%);
      cursor: pointer;
      font-size: 18px;
      color: #666;
      z-index: 10;
    }
    .toggle-visibility-icon {
      position: absolute;
      top: 50%;
      right: 16px;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #666;
      font-size: 18px;
      z-index: 10;
    }


  </style>
</head>
<body>

  <!-- navbar -->
  <%- include('partials/navbar') %>

  <!-- main content -->
  <div class="container py-5">
    <h3 class="fw-bold mb-4">Add More Coin</h3>
    <div class="row">
      <div class="col-lg-8">
        <form class="form-box">
          <div class="row form-section align-items-end">
            <div class="col-md-6">
              <label class="form-label fw-bold">Insert Coin You Want to Add</label>
              <input type="number" class="form-control" placeholder="Enter amount" id="coinInput" min="0">
            </div>
            <div class="col-md-6 text-end">
              <label class="form-label fw-bold">
                Current Coin: 
                <span class="text-primary" id="currentCoin"><%= user.coin %></span>
              </label>                            
            </div>
          </div>

          <hr class="my-3">

          <div class="form-section">
            <label class="form-label fw-bold mb-2">Special Deals</label>
          
            <div class="special-deal-item d-flex justify-content-between align-items-center" data-base="100" data-bonus="10">
              <span>Buy 100 Coins, Get 10 Extra</span>            
              <div>
                <button type="button" class="select-btn me-2 add-package">Select</button>
                <button type="button" class="btn btn-sm btn-outline-danger remove-package d-none">Remove</button>
              </div>
            </div>
          
            <div class="special-deal-item d-flex justify-content-between align-items-center" data-base="250" data-bonus="50">
              <span>Buy 250 Coins, Get 50 Extra</span>            
              <div>
                <button type="button" class="select-btn me-2 add-package">Select</button>
                <button type="button" class="btn btn-sm btn-outline-danger remove-package d-none">Remove</button>
              </div>
            </div>
          
            <div class="special-deal-item d-flex justify-content-between align-items-center" data-base="1000" data-bonus="100">
              <span>Buy 1000 Coins, Get 100 Extra</span>            
              <div>
                <button type="button" class="select-btn me-2 add-package">Select</button>
                <button type="button" class="btn btn-sm btn-outline-danger remove-package d-none">Remove</button>
              </div>
            </div>
          </div>
          
          <hr class="my-3">
         <div class="form-section">
              <label class="form-label fw-bold">Card Number</label>
               <div id="card-number-element" class="form-control"></div>
             </div>
            
            <div class="row g-3 form-section">
              <div class="col-md-6">
               <label class="form-label fw-bold">Expiry Date</label>
                <div id="card-expiry-element" class="form-control"></div>
              </div>
              <div class="col-md-6">
             <label class="form-label fw-bold">CVC</label>
                 <div id="card-cvc-element" class="form-control"></div>
             </div>
             </div>
          <div class="form-section">
            <label class="form-label fw-bold">Name on Card</label>
            <input type="text" class="form-control" id="cardholder-name" placeholder="Name on Card" value="<%= cardInfo?.cardHolderName || '' %>">
          </div>
        </form>
      </div>
      <div class="col-lg-4">
        <div class="order-summary">
          <h5 class="fw-bold mb-3">Order Summary</h5>
          <hr>
          <p class="mb-1">Purchased Coin: <strong id="coinAmount">$20</strong></p>
          <p class="mb-3">Total Price: <strong id="totalPrice">$200</strong></p>
          <p id="bonusInfo" class="text-success fw-semibold mb-3"></p>          
          <button id="pay-now" class="checkout-btn mb-3">Pay Now</button>

          <ul class="list-group mt-3" id="selectedPackagesList"></ul>

        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // element selectors
      const coinInput = document.getElementById('coinInput');
      const coinAmountDisplay = document.getElementById('coinAmount');
      const totalPriceDisplay = document.getElementById('totalPrice');
      const bonusInfo = document.getElementById('bonusInfo');
      const payBtn = document.querySelector('.checkout-btn');
      const nameInput = document.getElementById('cardholder-name');
    
      // coin summary logic
      function updateSummary() {
        const raw = parseInt(coinInput.value, 10) || 0;
        let bonus = 0;
        if (raw >= 100 && raw < 250) bonus = 10;
        else if (raw >= 250 && raw < 1000) bonus = 50;
        else if (raw >= 1000) bonus = 100;
    
        const totalCoins = raw + bonus;
        coinAmountDisplay.textContent = `${totalCoins} Coins`;
        totalPriceDisplay.textContent = `$${raw.toFixed(2)}`;
        bonusInfo.textContent = bonus ? `🎁 Extra coin: ${bonus}` : '';
      }
    
      coinInput.addEventListener('input', updateSummary);
    
      document.querySelectorAll('.special-deal-item').forEach(item => {
        const btn = item.querySelector('.add-package');
        btn.addEventListener('click', () => {
          coinInput.value = item.dataset.base;
          updateSummary();
        });
      });
    
      // stripe
      const stripe = Stripe('pk_test_51RF2PRFJwUJkAaIQvype4JOTw2HaUHLBdkLiZb5FUDNPKucWhetwjl69sLtM80gBUhFNPxjLms9TBdGKWLJfsuZJ00hOmtFPa2');
      const elements = stripe.elements();
      const style = {
        base: {
          fontSize: '16px',
          color: '#32325d',
          '::placeholder': { color: '#aaa' }
        }
      };
    
      const cardNumber = elements.create('cardNumber', { style });
      cardNumber.mount('#card-number-element');
    
      const cardExpiry = elements.create('cardExpiry', { style });
      cardExpiry.mount('#card-expiry-element');
    
      const cardCvc = elements.create('cardCvc', { style });
      cardCvc.mount('#card-cvc-element');
    
      // button handler
      function setLoading(isLoading) {
        payBtn.disabled = isLoading;
        payBtn.textContent = isLoading ? 'Processing…' : 'Pay Now';
      }
    
      // —— PAY NOW CLICK HANDLER ——
      payBtn.addEventListener('click', async e => {
        e.preventDefault();
    
        // validate amount
        const raw = parseInt(coinInput.value, 10) || 0;
        const amount = Math.round(raw * 100);
        if (amount <= 0) {
          return alert('Please enter a valid coin amount.');
        }
    
        setLoading(true);
    
        try {
          // create a PaymentIntent on your server
          const resp = await fetch('/payment/create-payment-intent', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount })
        });
          const { clientSecret, error: piError } = await resp.json();
          if (piError) throw new Error(piError);
          const { error: stripeError } = await stripe.confirmCardPayment(clientSecret, {
            payment_method: {
              card: cardNumber,
              billing_details: { name: nameInput.value }
            }
          });
          if (stripeError) throw stripeError;
    
          // on success, redirect to confirmation
          const raw   = parseInt(coinInput.value, 10) || 0;
          let bonus   = 0;
          if (raw >= 100 && raw < 250) bonus = 10;
          else if (raw >= 250 && raw < 1000) bonus = 50;
          else if (raw >= 1000) bonus = 100;
          
          const totalCoins = raw + bonus;

          const updateResp = await fetch('/payment/update-coin', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              userId: "<%= user._id %>",
              coins: totalCoins
            })
          });

          const updateResult = await updateResp.json();
          if (!updateResult.success) {
            throw new Error(updateResult.error || 'Coin update failed');
          };
          // Update the currentCoin element on the page
          const currentCoinEl = document.getElementById("currentCoin");
          if (currentCoinEl) {
            const prevCoin = parseInt(currentCoinEl.textContent, 10) || 0;
            const newCoin = prevCoin + totalCoins;
            currentCoinEl.textContent = newCoin;
            localStorage.setItem("updatedUserCoin", newCoin);
          }
          
          const orderNumber = new Date().toISOString().slice(0,10).replace(/-/g,'')
                              + '-' + Math.floor(1000+Math.random()*9000);

          window.location.href = `/payment/confirmation?` +
            `purchased=${raw}&bonus=${bonus}` +
            `&orderNumber=${orderNumber}`;
        } catch (err) {
          console.error(err);
          alert(err.message || 'Payment failed. Please try again.');
          setLoading(false);
        }
      });
    
      // —— CVC TOGGLE ——
      window.toggleVisibility = (inputId, btn) => {
        const input = document.getElementById(inputId);
        const icon = btn.querySelector('i');
        if (input.type === 'password') {
          input.type = 'text';
          icon.classList.replace('bi-eye-fill', 'bi-eye-slash-fill');
        } else {
          input.type = 'password';
          icon.classList.replace('bi-eye-slash-fill', 'bi-eye-fill');
        }
      };
    });
    </script>
    

    
  
    
  
</body>
</html>
