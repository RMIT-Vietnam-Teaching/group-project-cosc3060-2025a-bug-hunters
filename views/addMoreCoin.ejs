
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Add Coins</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://js.stripe.com/v3/"></script>

  <style>
    body {
      background-color: #fff;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }
    .form-box {
      border: 1px solid #ccc;
      border-radius: 12px;
      padding: 24px;
      margin-bottom: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
      background-color: #fff;
    }
    .order-summary {
      border: 1px solid #ccc;
      padding: 20px;
      border-radius: 12px;
      background-color: #fff;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }
    .checkout-btn {
      background-color: #e26d4d;
      color: white;
      font-weight: 600;
      padding: 12px 24px;
      border-radius: 8px;
      border: none;
      width: 100%;
      transition: background-color 0.2s ease-in-out;
    }
    .checkout-btn:hover {
      background-color: #c95535;
    }
    .select-btn {
      border: 1px solid #e26d4d;
      color: #e26d4d;
      background: transparent;
      border-radius: 6px;
      padding: 6px 16px;
      font-weight: 500;
      transition: all 0.2s;
    }
    .select-btn:hover {
      background-color: #e26d4d;
      color: white;
    }
    .form-control::placeholder {
      color: #aaa;
    }
    .form-label {
      margin-bottom: 4px;
    }
    .form-section {
      margin-bottom: 1.5rem;
    }
    .special-deal-item {
      border-bottom: 1px solid #eee;
      padding: 8px 0;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <h3 class="fw-bold mb-4">Add More Coin</h3>
    <div class="row">
      <div class="col-lg-8">
        <form class="form-box">
          <div class="row form-section align-items-end">
            <div class="col-md-6">
              <label class="form-label fw-bold">Insert Coin You Want to Add</label>
              <input type="number" class="form-control" placeholder="Enter amount" id="coinInput">
            </div>
            <div class="col-md-6 text-end">
              <label class="form-label fw-bold">Current Coin: <span class="text-primary">1234</span></label>
            </div>
          </div>

          <hr class="my-3">

          <div class="form-section">
            <label class="form-label fw-bold mb-2">Special Deals</label>
          
            <div class="special-deal-item d-flex justify-content-between align-items-center" data-base="100" data-bonus="10">
              <span>Buy 100 Coins, Get 10 Extra</span>            
              <div>
                <button type="button" class="select-btn me-2 add-package">Select</button>
                <button type="button" class="btn btn-sm btn-outline-danger remove-package d-none">Remove</button>
              </div>
            </div>
          
            <div class="special-deal-item d-flex justify-content-between align-items-center" data-base="250" data-bonus="50">
              <span>Buy 250 Coins, Get 50 Extra</span>            
              <div>
                <button type="button" class="select-btn me-2 add-package">Select</button>
                <button type="button" class="btn btn-sm btn-outline-danger remove-package d-none">Remove</button>
              </div>
            </div>
          
            <div class="special-deal-item d-flex justify-content-between align-items-center" data-base="1000" data-bonus="100">
              <span>Buy 1000 Coins, Get 100 Extra</span>            
              <div>
                <button type="button" class="select-btn me-2 add-package">Select</button>
                <button type="button" class="btn btn-sm btn-outline-danger remove-package d-none">Remove</button>
              </div>
            </div>
          </div>
          
          <hr class="my-3">
          <div class="form-section">
            <label class="form-label fw-bold">Card Number</label>
            <div id="card-number" class="form-control p-3"></div>
          </div>
          <div class="row form-section">
            <div class="col-md-6">
              <label class="form-label fw-bold">Expiry Date</label>
              <div id="card-expiry" class="form-control p-3"></div>
            </div>
            <div class="col-md-6">
              <label class="form-label fw-bold">CVC</label>
              <div id="card-cvc" class="form-control p-3"></div>
            </div>
          </div>
          <div class="form-section">
            <label class="form-label fw-bold">Name on Card</label>
            <input type="text" class="form-control" id="cardholder-name" placeholder="Name on Card">
          </div>
        </form>
      </div>
      <div class="col-lg-4">
        <div class="order-summary">
          <h5 class="fw-bold mb-3">Order Summary</h5>
          <hr>
          <p class="mb-1">Purchased Coin: <strong id="coinAmount">$20</strong></p>
          <p class="mb-3">Total Price: <strong id="totalPrice">$200</strong></p>
          <p id="bonusInfo" class="text-success fw-semibold mb-3"></p>          
          <button class="checkout-btn mb-3">Pay Now</button>

          <ul class="list-group mt-3" id="selectedPackagesList"></ul>

        </div>
      </div>
    </div>
  </div>
  <script>
    const stripe = Stripe("pk_test_51RF2PRFJwUJkAaIQvype4JOTw2HaUHLBdkLiZb5FUDNPKucWhetwjl69sLtM80gBUhFNPxjLms9TBdGKWLJfsuZJ00hOmtFPa2");
    const elements = stripe.elements();
  
    const style = {
      base: {
        fontSize: '16px',
        color: '#333',
        fontFamily: '"Segoe UI", Tahoma, Geneva, Verdana, sans-serif',
        '::placeholder': { color: '#aaa' }
      },
      invalid: {
        color: '#e5424d',
        iconColor: '#e5424d'
      }
    };
  
    const cardNumber = elements.create('cardNumber', { style });
    cardNumber.mount('#card-number');
    const cardExpiry = elements.create('cardExpiry', { style });
    cardExpiry.mount('#card-expiry');
    const cardCvc = elements.create('cardCvc', { style });
    cardCvc.mount('#card-cvc');
  
    const coinInput = document.getElementById('coinInput');
    const coinAmountDisplay = document.getElementById('coinAmount');
    const totalPriceDisplay = document.getElementById('totalPrice');
    const selectedPackagesList = document.getElementById('selectedPackagesList');
  
    let selectedPackage = null;
  
    function updateSummary() {
      const base = selectedPackage?.base || parseInt(coinInput.value) || 0;
      const bonus = selectedPackage?.bonus || 0;
      const totalCoin = base + bonus;
      const totalPrice = base.toFixed(2); // 1 coin = $1
  
      coinAmountDisplay.textContent = `${totalCoin} Coins`;
      totalPriceDisplay.textContent = `$${totalPrice}`;
  
      selectedPackagesList.innerHTML = '';
  
      if (selectedPackage) {
        const labelLi = document.createElement('li');
        labelLi.className = 'list-group-item d-flex justify-content-between align-items-center';
        labelLi.innerHTML = `
          ${selectedPackage.label}
          <button class="btn btn-sm btn-outline-danger" onclick="removePackage()">Remove</button>
        `;
        selectedPackagesList.appendChild(labelLi);
  
        document.getElementById('bonusInfo').textContent = `üéÅ Extra coin: ${bonus}`;
      } else {
        document.getElementById('bonusInfo').textContent = '';
      
      }
    }
  
    function removePackage() {
      selectedPackage = null;
      coinInput.value = '';
      updateSummary();
    }
  
    // Manual input clears selected package
    coinInput.addEventListener('input', () => {
  const entered = parseInt(coinInput.value) || 0;

  // Check if the input matches any special deal
  const match = Array.from(document.querySelectorAll('.special-deal-item')).find(item => {
    return parseInt(item.getAttribute('data-base')) === entered;
  });

  if (match) {
    const base = parseInt(match.getAttribute('data-base'));
    const bonus = parseInt(match.getAttribute('data-bonus'));
    const label = match.querySelector('span').textContent.trim();
    selectedPackage = { base, bonus, label };
  } else {
    selectedPackage = null;
  }

  updateSummary();
});

    // Handle special deal selection
    document.querySelectorAll('.special-deal-item').forEach(item => {
      const base = parseInt(item.getAttribute('data-base')) || 0;
      const bonus = parseInt(item.getAttribute('data-bonus')) || 0;
      const label = item.querySelector('span').textContent.trim();
  
      item.querySelector('.add-package').addEventListener('click', () => {
        selectedPackage = { base, bonus, label };
        coinInput.value = base;
        updateSummary();
      });
    });
  
    // Checkout
    document.querySelector('.checkout-btn').addEventListener('click', async () => {
      const baseAmount = selectedPackage?.base || parseInt(coinInput.value) || 0;
      const cents = baseAmount * 100;
  
      const res = await fetch('/payment/create-payment-intent', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount: cents })
      });
  
      const { clientSecret } = await res.json();
  
      const result = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: cardNumber,
          billing_details: {
            name: document.getElementById('cardholder-name').value
          }
        }
      });
  
      if (result.error) {
        alert("‚ùå " + result.error.message);
      } else if (result.paymentIntent.status === 'succeeded') {
        window.location.href = "/payment/confirmation";
      }
    });
  </script>
  
    
  
</body>
</html>
