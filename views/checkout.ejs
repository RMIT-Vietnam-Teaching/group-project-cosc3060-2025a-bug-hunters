<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Checkout</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">


  <style>
    body { background-color: #fff; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; }
    .form-box { border: 1px solid #ccc; border-radius: 12px; margin-bottom: 30px; overflow: hidden; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); }
    .radio-option { padding: 16px 24px; border-bottom: 1px solid #ccc; display: flex; align-items: center; }
    .coin-input-box, .card-input-box { padding: 24px; display: none; }
    .order-summary { border: 1px solid #ccc; padding: 20px; border-radius: 12px; background-color: #fff; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); }

    /* Checkout button full width minus side margin */
    .checkout-btn {
      background-color: #e26d4d;
      color: white;
      font-weight: 600;
      padding: 12px 24px;
      border-radius: 8px;
      border: none;
      transition: background-color 0.2s ease-in-out;
      margin: 10px 20px 0;
      width: calc(100% - 40px);
    }
    .checkout-btn:hover { background-color: #c95535; }

    /* Add more coin button auto width */
    .add-btn {
      background-color: #e26d4d;
      color: white;
      font-weight: 600;
      padding: 12px 24px;
      border-radius: 8px;
      border: none;
      transition: background-color 0.2s ease-in-out;
      display: inline-block;
      width: auto;
      margin-top: 10px;
      text-decoration: none;
    }
    .add-btn:hover { background-color: #c95535; }

    .cart-img { width: 60px; height: 60px; background-color: #ccc; border-radius: 8px; margin-right: 16px; }
    .cart-item { box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.12); border-radius: 12px; margin-bottom: 1rem; padding: 1rem; background-color: white; }
    
    /* New styles for coin status */
    .coin-status {
      margin-top: 10px;
      padding: 8px;
      border-radius: 4px;
      font-weight: 500;
    }
    .coin-sufficient {
      background-color: #d4edda;
      color: #155724;
    }
    .coin-insufficient {
      background-color: #f8d7da;
      color: #721c24;
    }
    .course-meta span {
  margin-bottom: 2px;
}

  </style>
</head>
<body>
  <%- include('partials/navbar') %>

  <div class="container py-5">
    <div class="row">
      <!-- Card Details -->
      <div class="col-lg-8">
        <form class="form-box" onsubmit="return false;">
          <div class="radio-option">
            <input class="form-check-input me-2" type="radio" name="paymentMethod" id="viaCard" checked>
            <label class="form-check-label fw-bold" for="viaCard">Via Card</label>
          </div>
          <div class="card-input-box">
            <div class="form-section mb-3">
              <label class="form-label fw-bold">Card Number</label>
              <div id="card-number-element" class="form-control p-3" style="height: auto;"></div>
            </div>

            <div class="row form-section mb-3">
              <div class="col-md-6">
                <label class="form-label fw-bold">Expiry Date</label>
                <div id="card-expiry-element" class="form-control p-3" style="height: auto;"></div>
              </div>
              <div class="col-md-6">
                <label class="form-label fw-bold">CVC</label>
                <div id="card-cvc-element" class="form-control p-3" style="height: auto;"></div>
              </div>
            </div>

            <div class="form-section">
              <label class="form-label fw-bold">Name on Card</label>
              <input type="text" id="cardholder-name" class="form-control" placeholder="Full Name" value="<%= cardInfo?.cardHolderName || '' %>">
            </div>

            <div id="card-errors" class="text-danger mt-2"></div>
          </div>

          <div class="radio-option">
            <input class="form-check-input me-2" type="radio" name="paymentMethod" id="viaCoin">
            <label class="form-check-label fw-bold" for="viaCoin">Via Our Coin</label>
          </div>

          <div class="coin-input-box">
            <label class="form-label fw-bold">Coin you have</label>
             <input type="text" id="user-coin" class="form-control mb-3" readonly 
                value="<%= user.coin %>" 
                style="background-color: #f9f9f9; cursor: not-allowed;">
            
            <div id="coin-status" class="coin-status">
            </div>
            
            <a href="/payment/addcoin?id=<%= user._id %>" class="add-btn">Add more coin</a>
          </div>
        </form>
      </div>

      <!-- Order Summary -->
      <div class="col-lg-4">
        <div class="order-summary">
          <h5 class="fw-bold mb-3">Order Summary</h5>
          <hr>
          <p class="mb-1">
            Total (<span id="course-count"><%= cartItems.length %></span> Courses):
            <strong id="total-amount">$<%= totalCost %></strong>
          </p>          
          <button type="button" class="checkout-btn">Checkout</button>
        </div>
      </div>
    </div>

    <!-- Order Detail -->
   
<div class="row">
  <div class="col-lg-8">
    <h5 class="fw-bold mb-3 mt-5">Order detail</h5>
    <% cartItems.forEach(item => { %>
      <div class="cart-item d-flex align-items-center mb-2" data-course-id="<%= item._id %>" style="font-size: 0.9rem;">
        <img 
          src="<%= item.image || '/images/course-placeholder.jpg' %>" 
          class="cart-img" 
          style="width: 100px; height: 70px; object-fit: cover; border-radius: 6px;"
        >
    
        <div class="ms-2">
          <div class="fw-semibold" style="font-size: 1rem;"><%= item.name %></div>
    
          <div class="text-muted mb-1" style="font-size: 0.85rem;">
            Created by 
            <% if (item.author && item.author.firstName && item.author.lastName) { %>
              <%= item.author.firstName %> <%= item.author.lastName %>
            <% } else { %>
              Unknown Instructor
            <% } %>
            <% if (item.duration) { %> ¬∑ <%= item.duration %><% } %>
          </div>
    
          <div class="fw-semibold mb-1 item-price" style="font-size:0.95rem;">
            $<%= item.price %>
          </div>
          <div style="font-size: 0.85rem;">‚≠ê <%= item.rating || 0 %></div>
        </div>
        <button 
          class="remove-btn btn btn-sm btn-outline-danger ms-auto" 
          data-id="<%= item._id %>"
        >
          <i class="bi bi-trash"></i>
        </button>
      </div>
    <% }) %>    
         
  </div>
</div>
<script src="https://js.stripe.com/v3/"></script>
<script>
  // summary-recalc function
  function updateCartSummary() {
    const prices = Array
      .from(document.querySelectorAll('.item-price'))
      .map(el => parseFloat(el.textContent.replace(/[^0-9.]/g, '')) || 0);

    const total = prices.reduce((a,b) => a + b, 0).toFixed(2);
    const count = prices.length;

    document.getElementById('course-count').textContent   = count;
    document.getElementById('total-amount').textContent   = '$' + total;

    console.log('‚ñ∂ summary updated:', { count, total });
  }

  // delegated remove-handler
  document.body.addEventListener('click', async e => {
    const btn = e.target.closest('.remove-btn');
    if (!btn) return;

    e.preventDefault();
    const courseId = btn.dataset.id;
    console.log('üóë  removing course:', courseId);

    try {
      const res  = await fetch(`/cart/remove/${courseId}`, {
        method: 'POST',
        headers: { 'Accept': 'application/json' }
      });
      const data = await res.json();
      if (!data.success) throw new Error('remove failed');

      // 1) pull the card off the DOM
      const row = btn.closest('.cart-item');
      if (row) row.remove();

      // 2) update your navbar badge
      const badge = document.getElementById('cart-count');
      if (badge) badge.textContent = data.cartCount;

      // 3) recalc & repaint the summary
      updateCartSummary();
    } catch (err) {
      console.error(err);
      alert(err.message || 'Couldn‚Äôt remove course');
    }
  });

  // (optional) initialize summary on page load:
  document.addEventListener('DOMContentLoaded', updateCartSummary);
</script>

  
  
<script>
 

document.addEventListener("DOMContentLoaded", function () {
  // ‚Äî‚Äî ELEMENT SELECTORS ‚Äî‚Äî
  const payBtn        = document.querySelector(".checkout-btn");
  const cardBox       = document.querySelector(".card-input-box");
  const coinBox       = document.querySelector(".coin-input-box");
  const cardErrorsDiv = document.getElementById("card-errors");
  const coinStatusDiv = document.getElementById("coin-status");
  const totalAmountEl = document.getElementById("total-amount");
  const userCoinEl    = document.getElementById("user-coin");

  // ‚Äî‚Äî CALCULATE TOTAL & USER COINS ‚Äî‚Äî
  const totalCost = parseFloat(totalAmountEl.textContent.replace("$", "")) || 0;
  let userCoins   = parseFloat(userCoinEl.value) || 0;
  const storedCoin = localStorage.getItem("updatedUserCoin");
  if (storedCoin) {
    userCoins = parseFloat(storedCoin);
    userCoinEl.value = storedCoin;
    localStorage.removeItem("updatedUserCoin");
  }

  // ‚Äî‚Äî UPDATE COIN STATUS ‚Äî‚Äî
  function updateCoinStatus() {
    if (userCoins >= totalCost) {
      coinStatusDiv.className = "coin-status coin-sufficient";
      coinStatusDiv.textContent = `You have enough coins (${userCoins}) to cover $${totalCost.toFixed(2)}.`;
    } else {
      const needed = totalCost - userCoins;
      coinStatusDiv.className = "coin-status coin-insufficient";
      coinStatusDiv.textContent = `You need ${needed.toFixed(2)} more coins to cover this purchase.`;
    }
  }
  updateCoinStatus();

  // ‚Äî‚Äî errors ‚Äî‚Äî
  function showError(message) {
    cardErrorsDiv.innerHTML = `<div class="alert alert-danger">${message}</div>`;
    console.error(message);
  }

  // ‚Äî‚Äî stripe ‚Äî‚Äî
  const stripeKey = "pk_test_51RF2PRFJwUJkAaIQvype4JOTw2HaUHLBdkLiZb5FUDNPKucWhetwjl69sLtM80gBUhFNPxjLms9TBdGKWLJfsuZJ00hOmtFPa2";
  if (!stripeKey) {
    showError("Stripe public key is not set.");
    return;
  }
  const stripe   = Stripe(stripeKey);
  const elements = stripe.elements();
  const style    = {
    base: {
      fontSize: "16px",
      color: "#32325d",
      "::placeholder": { color: "#aaa" }
    },
    invalid: { color: "#fa755a", iconColor: "#fa755a" }
  };
  const cardNumber = elements.create("cardNumber", { style });
  const cardExpiry = elements.create("cardExpiry", { style });
  const cardCvc    = elements.create("cardCvc",    { style });

  let stripeMounted = false;
  function togglePaymentSection() {
    const showCard = document.getElementById("viaCard").checked;
    cardBox.style.display = showCard ? "block" : "none";
    coinBox.style.display = showCard ? "none"  : "block";

    if (showCard && !stripeMounted) {
      try {
        cardNumber.mount("#card-number-element");
        cardExpiry.mount("#card-expiry-element");
        cardCvc.mount("#card-cvc-element");
        stripeMounted = true;
      } catch (err) {
        showError("Failed to initialize payment form. Refresh and try again.");
      }
    }
  }
  document.getElementById("viaCard").addEventListener("change", togglePaymentSection);
  document.getElementById("viaCoin").addEventListener("change", togglePaymentSection);
  togglePaymentSection(); // initial

  // ‚Äî‚Äî pay now button ‚Äî‚Äî
  payBtn.addEventListener("click", async (e) => {
    e.preventDefault();
    payBtn.disabled    = true;
    payBtn.textContent = "Processing‚Ä¶";
    cardErrorsDiv.textContent = "";

    const isCard = document.getElementById("viaCard").checked;
    const isCoin = document.getElementById("viaCoin").checked;

    try {
      // generate an orderNumber & define raw/bonus
      const orderNumber = "ORD-" +
        new Date().toISOString().slice(0,10).replace(/-/g,"") +
        "-" + Math.floor(1000 + Math.random()*9000);

      if (isCard) {
        // ‚Äî cardd ‚Äî
        const name = document.getElementById("cardholder-name").value.trim();
        if (!name) throw new Error("Please enter the cardholder's name.");

        // create a PaymentIntent
        const resp = await fetch("/payment/create-payment-intent", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount: Math.round(totalCost * 100) })
        });
        const text = await resp.text();
        let data;
        try { data = JSON.parse(text); }
        catch { throw new Error("Invalid server response"); }
        if (!resp.ok) throw new Error(data.error || `Status ${resp.status}`);
        if (!data.clientSecret) throw new Error("Missing clientSecret");

        // confirm payment
        const result = await stripe.confirmCardPayment(data.clientSecret, {
          payment_method: { card: cardNumber, billing_details: { name } }
        });
        if (result.error) throw new Error(result.error.message);

        // redirect
        const raw   = totalCost;
        const bonus = 0;
        window.location.href =
          `/payment/confirmation?` +
          `purchased=${raw}&bonus=${bonus}` +
          `&orderNumber=${orderNumber}`;

      } else if (isCoin) {
        // ‚Äî coins ‚Äî
        if (userCoins < totalCost) {
          throw new Error(`Not enough coins. You need ${(totalCost - userCoins).toFixed(2)} more.`);
        }
        const courseIds = Array.from(document.querySelectorAll(".cart-item"))
          .map(item => item.dataset.courseId);

        // call your use-coin endpoint
        const resp = await fetch("/payment/use-coin", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId: "<%= user._id %>",
            courseIds,
            totalCost
          })
        });
        if (!resp.ok) {
          const errText = await resp.text();
          let errData;
          try { errData = JSON.parse(errText); }
          catch {}
          throw new Error(errData?.error || `Status ${resp.status}`);
        }
        const result = await resp.json();
        if (!result.success) throw new Error(result.error || "Coin payment failed");

        // redirect
        const raw   = totalCost;
        const bonus = 0;
        window.location.href =
          `/payment/confirmation?` +
          `purchased=${raw}&bonus=${bonus}` +
          `&orderNumber=${orderNumber}`;
      }
    } catch (err) {
      showError(err.message);
      payBtn.disabled    = false;
      payBtn.textContent = "Pay Now";
    }
  });
});
</script>


</body>
</html>