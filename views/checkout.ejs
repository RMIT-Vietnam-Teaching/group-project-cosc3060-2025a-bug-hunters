<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Checkout</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <script src="https://js.stripe.com/v3/"></script>
  <style>
    body { background-color: #fff; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; }
    .form-box { border: 1px solid #ccc; border-radius: 12px; margin-bottom: 30px; overflow: hidden; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); }
    .radio-option { padding: 16px 24px; border-bottom: 1px solid #ccc; display: flex; align-items: center; }
    .coin-input-box, .card-input-box { padding: 24px; display: none; }
    .order-summary { border: 1px solid #ccc; padding: 20px; border-radius: 12px; background-color: #fff; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); }
    .checkout-btn, .add-btn { background-color: #e26d4d; color: white; font-weight: 600; padding: 12px 24px; border-radius: 8px; border: none; transition: background-color 0.2s ease-in-out; }
    .checkout-btn:hover, .add-btn:hover { background-color: #c95535; }
    .cart-img { width: 60px; height: 60px; background-color: #ccc; border-radius: 8px; margin-right: 16px; }
    .cart-item { box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.12); border-radius: 12px; margin-bottom: 1rem; padding: 1rem; background-color: white; }
  </style>
</head>
<body>
  <%- include('partials/navbar') %>

  <div class="container py-5">
    <div class="row">
      <div class="col-lg-8">
        <form class="form-box" onsubmit="return false;">
          <div class="radio-option">
            <input class="form-check-input me-2" type="radio" name="paymentMethod" id="viaCard" checked>
            <label class="form-check-label fw-bold" for="viaCard">Via Card</label>
          </div>
          <div class="card-input-box">
            <div class="form-section mb-3">
              <label class="form-label fw-bold">Card Number</label>
              <div id="card-number-element" class="form-control p-3" style="height: auto;"></div>
            </div>
          
            <div class="row form-section mb-3">
              <div class="col-md-6">
                <label class="form-label fw-bold">Expiry Date</label>
                <div id="card-expiry-element" class="form-control p-3" style="height: auto;"></div>
              </div>
              <div class="col-md-6">
                <label class="form-label fw-bold">CVC</label>
                <div id="card-cvc-element" class="form-control p-3" style="height: auto;"></div>
              </div>
            </div>
          
            <div class="form-section">
              <label class="form-label fw-bold">Name on Card</label>
              <input type="text" id="cardholder-name" class="form-control" placeholder="Full Name" value="<%= cardInfo?.cardHolderName || '' %>">
            </div>
          
            <div id="card-errors" class="text-danger mt-2"></div>
          </div>          

          <div class="radio-option">
            <input class="form-check-input me-2" type="radio" name="paymentMethod" id="viaCoin">
            <label class="form-check-label fw-bold" for="viaCoin">Via Our Coin</label>
          </div>

          <div class="coin-input-box">
            <label class="form-label fw-bold">Coin you have</label>
            <input type="text" id="user-coin" class="form-control mb-3" readonly value="<%= user?.coin || 0 %>" style="background-color: #f9f9f9; cursor: not-allowed;">
            <a href="/payment/addcoin?id=<%= user._id %>" class="add-btn text-decoration-none text-white d-inline-block text-center mb-3">Add more coin</a>
          </div>
        </form>

        <h5 class="fw-bold mb-3 mt-5">Order detail</h5>
        <!-- <% cartItems.forEach(item => { %>
          <div class="cart-item d-flex align-items-center">
            <div class="cart-img"></div>
            <div>
              <div class="fw-bold"><%= item.title %></div>
              <div><%= item.description %></div>
              <div><strong>$<%= item.price %></strong></div>
            </div>
          </div>
        <% }) %>
      </div> -->

       <!-- course list -->

       <div class="cart-item d-flex align-items-center">
         <div class="cart-img"></div>
         <div>
           <div class="fw-bold">Introduction to Banana Programming üçå</div>
           <div>By Cody Fisher ¬∑ 12.5 hours of peeling knowledge</div>
           <div><strong>$49.00</strong></div>
         </div>
       </div>
       <div class="cart-item d-flex align-items-center">
         <div class="cart-img"></div>
         <div>
           <div class="fw-bold">Advanced Cat Typing Techniques üò∫‚å®Ô∏è</div>
           <div>By Whiskers McMeow ¬∑ 3.5 hours of paw wisdom</div>
           <div><strong>$29.00</strong></div>
         </div>
       </div>
     </div>

      <div class="col-lg-4">
        <div class="order-summary">
          <h5 class="fw-bold mb-3">Order Summary</h5>
          <hr>
          <p class="mb-1">Total (<%= cartItems.length %> Courses): <strong>$<%= cartItems.reduce((sum, item) => sum + item.price, 0) %></strong></p>
          <button type="button" class="checkout-btn mb-3" style="z-index: 9999; position: relative;">Pay Now</button>
        </div>
      </div>
    </div>
  </div>

 

<script>
document.addEventListener("DOMContentLoaded", function () {
  const payBtn = document.querySelector(".checkout-btn");
  const cardBox = document.querySelector('.card-input-box');
  const coinBox = document.querySelector('.coin-input-box');
  const cardErrorsDiv = document.getElementById('card-errors');

  // Function to display errors
  function showError(message) {
    cardErrorsDiv.innerHTML = `<div class="alert alert-danger">${message}</div>`;
    console.error(message);
  }

  // Verify Stripe key is present
  const stripeKey = "pk_test_51RF2PRFJwUJkAaIQvype4JOTw2HaUHLBdkLiZb5FUDNPKucWhetwjl69sLtM80gBUhFNPxjLms9TBdGKWLJfsuZJ00hOmtFPa2";
  if (!stripeKey || stripeKey.trim() === '') {
    showError("Stripe key not configured properly.");
    return;
  }

  try {
    const stripe = Stripe(stripeKey);
    const elements = stripe.elements();

    // Style the Elements
    const style = {
      base: {
        color: '#32325d',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };

    // Create the card Elements
    const cardNumber = elements.create('cardNumber', {style: style});
    const cardExpiry = elements.create('cardExpiry', {style: style});
    const cardCvc = elements.create('cardCvc', {style: style});

    // Add event listeners for real-time validation
    cardNumber.addEventListener('change', function(event) {
      if (event.error) {
        showError(event.error.message);
      } else {
        cardErrorsDiv.textContent = '';
      }
    });

    let stripeMounted = false;

    function togglePaymentSection() {
      const showCard = document.getElementById('viaCard').checked;
      cardBox.style.display = showCard ? 'block' : 'none';
      coinBox.style.display = !showCard ? 'block' : 'none';

      if (showCard && !stripeMounted) {
        try {
          cardNumber.mount("#card-number-element");
          cardExpiry.mount("#card-expiry-element");
          cardCvc.mount("#card-cvc-element");
          stripeMounted = true;
          console.log("Stripe elements mounted successfully");
        } catch (err) {
          console.error("Error mounting Stripe elements:", err);
          showError("Failed to initialize the payment form. Please refresh the page.");
        }
      }
    }

    document.getElementById('viaCard').addEventListener('change', togglePaymentSection);
    document.getElementById('viaCoin').addEventListener('change', togglePaymentSection);
    togglePaymentSection(); // Initialize on page load

    payBtn.addEventListener("click", async function (e) {
      e.preventDefault();
      payBtn.disabled = true;
      payBtn.textContent = "Processing...";
      cardErrorsDiv.textContent = '';

      try {
        const isCard = document.getElementById("viaCard").checked;
        const isCoin = document.getElementById("viaCoin").checked;

        if (isCard) {
          // Card payment flow
          const cardholderName = document.getElementById('cardholder-name').value.trim();
          if (!cardholderName) {
            showError("Please enter the cardholder's name");
            payBtn.disabled = false;
            payBtn.textContent = "Pay Now";
            return;
          }

          try {
            // FIXED: Hard-code the total amount for simplicity and reliability
            const totalAmount = 78.00; // $49 + $29 = $78
            const amountInCents = Math.round(totalAmount * 100); // Convert to cents
            
            console.log("Sending payment intent request with amount:", amountInCents);
            
            const response = await fetch('/payment/create-payment-intent', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                amount: amountInCents 
              })
            });
            
            const responseText = await response.text();
            console.log("Raw response:", responseText);
            
            // Try to parse the response
            let data;
            try {
              data = JSON.parse(responseText);
            } catch (parseError) {
              console.error("Failed to parse response:", parseError);
              throw new Error("Invalid response from server");
            }
            
            if (!response.ok) {
              throw new Error(data.error || `Server error: ${response.status}`);
            }
            
            if (!data.clientSecret) {
              throw new Error("Invalid response: No client secret provided");
            }
            
            console.log("Confirming payment with secret:", data.clientSecret.substr(0, 10) + "...");
            
            const result = await stripe.confirmCardPayment(data.clientSecret, {
              payment_method: {
                card: cardNumber,
                billing_details: {
                  name: cardholderName
                }
              }
            });
            
            console.log("Payment result:", result);

            if (result.error) {
              throw new Error(result.error.message);
            } else {
              console.log('Payment succeeded:', result.paymentIntent.id);
              window.location.href = "/payment/confirmation";
            }
          } catch (err) {
            console.error("Payment error:", err);
            showError(err.message || "Payment failed. Please try again.");
          }
        } else if (isCoin) {
          // Coin payment flow
          const userCoin = parseInt(document.getElementById('user-coin').value) || 0;
          const total = 78.00; // $49 + $29 = $78
          
          if (userCoin < total) {
            showError("You don't have enough coins for this purchase.");
            payBtn.disabled = false;
            payBtn.textContent = "Pay Now";
            return;
          }

          try {
            const response = await fetch('/payment/use-coin', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                userId: "<%= user._id %>",
                courseIds: ["course1", "course2"], // Hard-code IDs or get them from the DOM
                totalCost: total
              })
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.error || `Server error: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
              window.location.href = "/payment/confirmation";
            } else {
              throw new Error(result.error || "Payment failed");
            }
          } catch (err) {
            console.error("Coin payment error:", err);
            showError(err.message || "Coin payment failed. Please try again.");
          }
        }
      } catch (err) {
        console.error("Payment processing error:", err);
        showError(err.message || "An unexpected error occurred. Please try again.");
      } finally {
        payBtn.disabled = false;
        payBtn.textContent = "Pay Now";
      }
    });
  } catch (e) {
    console.error("Stripe initialization error:", e);
    showError("Payment system could not be initialized. Please refresh the page or try again later.");
  }
});
</script>
  
</body>
</html>
